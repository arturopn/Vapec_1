<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="VapecMenuView" backKeyPressed="busy()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		.boton{
			skinClass:ClassReference("skins.botonSkin");
			/*chromeColor: #FFFFFF;*/
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.google.zxing.BarcodeFormat;
			import com.google.zxing.BinaryBitmap;
			import com.google.zxing.BufferedImageLuminanceSource;
			import com.google.zxing.DecodeHintType;
			import com.google.zxing.Result;
			import com.google.zxing.client.result.ParsedResult;
			import com.google.zxing.client.result.ResultParser;
			import com.google.zxing.common.BitMatrix;
			import com.google.zxing.common.ByteMatrix;
			import com.google.zxing.common.GlobalHistogramBinarizer;
			import com.google.zxing.common.flexdatatypes.HashTable;
			import com.google.zxing.datamatrix.DataMatrixReader;
			import com.google.zxing.pdf417.encoder.BarcodeMatrix;
			import com.google.zxing.qrcode.QRCodeReader;
			import com.google.zxing.qrcode.detector.Detector;
			import com.pepsico.vapec.webservices.WebserviceManager;
			
			import flash.events.TimerEvent;
			import flash.utils.Timer;
			
			import mx.events.FlexEvent;
			
			import spark.events.ViewNavigatorEvent;
			
			protected var camera:Camera;
			private var videoDisplay:Video=new Video(360, 360);
			private var qrReader:QRCodeReader;
			private var bar:DataMatrixReader;
			private var bmd:BitmapData;
			private var cameraStarted:Boolean = false;
			
			
		      //consoleLabel.text;
			public var user_name:String ="DD";
			
			protected function button_clickHandler(event:MouseEvent):void
			{
				var wsMgr:WebserviceManager = new WebserviceManager();
				
				try
				{
					wsMgr.importZip();
				}
				catch(e:Error)
				{
					trace(e.getStackTrace());
				}
				
		
			}
			
		protected function buttonCamara_clickHandler(event:MouseEvent):void
		{
			if (!cameraStarted) {
				if (Camera.isSupported)
				{
					camera=Camera.getCamera();
					camera.setMode(360, 360, 24);
					
					videoDisplay.x = 360;
					sv.addChild(videoDisplay);
					
					videoDisplay.attachCamera(camera);
					videoDisplay.rotation=90;
					qrReader=new QRCodeReader;
					bar = new DataMatrixReader;
					btn.label = "Scan Now";
					lbl.text = "";
					cameraStarted = true;
				}
				else {
					lbl.text = "no camera found";
				}
			}
			else {
				decodeSnapshot();
			}
		}
			
			public function decodeSnapshot():void
			{
				lbl.text="checking...";
				bmd=new BitmapData(300, 300);
				bmd.draw(videoDisplay, null, null, null, null, true);
				videoDisplay.cacheAsBitmap=true;
				videoDisplay.cacheAsBitmapMatrix=new Matrix;
				decodeBitmapData(bmd, 300, 300);
				bmd.dispose();
				bmd=null;
				System.gc();
			}
			
			public function decodeBitmapData(bmpd:BitmapData, width:int, height:int):void
			{
				var lsource:BufferedImageLuminanceSource=new BufferedImageLuminanceSource(bmpd);
				var bitmap:BinaryBitmap=new BinaryBitmap(new GlobalHistogramBinarizer(lsource));
				
				var ht:HashTable=null;
				ht=this.getAllHints();
				
				var res:Result=null;
				try {
					res=bar.decode(bitmap, ht);
					//res=qrReader.decode(bitmap, ht);
				}
				catch (event:Error) {
				}
				
				if (res == null) {
					videoDisplay.clear();
					lbl.text="nothing decoded";
				}
				else {
					var parsedResult:ParsedResult=ResultParser.parseResult(res);
					lbl.text=parsedResult.getDisplayResult();
					sv.removeChild(videoDisplay);
					cameraStarted = false;
					btn.label = "Start Camera";
				}
			}
			
			public function getAllHints():HashTable
			{
				var ht:HashTable=new HashTable;
				ht.Add(DecodeHintType.POSSIBLE_FORMATS, BarcodeFormat.QR_CODE);
				return ht;
			}
			
		protected function links():void
		{
				{	bi.visible = !bi.visible};
				
				
				
				var user_data:Object = new Object();
				user_data.user_name = "User Started";
				user_data.user_coaching = true;
				user_data.user_agenda = true;
				user_data.user_reports = true;
				user_data.user_EOD = true;
				user_data.user_comm = true;
				
				/*var _login:Test = Test(PopUpManager.createPopUp(this, Test, true));
				PopUpManager.centerPopUp(_login);*/
				navigator.pushView(VapecMenuOnView,user_data);
			}
			
		protected function busy():void
		{
			{bi.visible = !bi.visible}
		}
			
			private var myColorTransform:ColorTransform;
			private function glow(boton:Button):void
			{
				myColorTransform = new ColorTransform(1,1,1,1,50,50,50);
				boton.transform.colorTransform = myColorTransform;
				
			}
			
		]]>
	</fx:Script>
<<<<<<< HEAD
	
	<!--<s:navigationContent>
		<s:Button id="ok1" 
				  styleName="boton" 
				  icon="assets/images/ok.png" x="615" y="437" click="trace();navigator.pushView(VapecMenuOnView,data);" >
		</s:Button>
	</s:navigationContent>-->
	
=======

>>>>>>> 52c7d0df6ff6e2e6e77a5f61224c1dcd10ba82cd
    <s:Image x="24" y="21" source="assets/images/supervisor_comp.png">		
	</s:Image>
	<s:Rect left="341" right="2" top="22" bottom="1250"
			id="borderRect"
			topLeftRadiusX="10"
			topLeftRadiusY="10"
			bottomLeftRadiusX="10"
			bottomLeftRadiusY="10"
			topRightRadiusX="0"
			topRightRadiusY="0"
			bottomRightRadiusX="0"
			bottomRightRadiusY="0"
			>
		<s:stroke>
			<s:SolidColorStroke id="borderStroke" color="0x6BA6F1" weight="2"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor id="bgFill" color="0x6BA6F1"  alpha="1" />
		</s:fill>
		 
	</s:Rect>
	<s:Label fontFamily="Futura" fontSize="38" color="#FFFFFF" left="270" top="9">
		GERENTE SURCURSAL MINAS
	</s:Label>
	<s:Label fontFamily="Futura" fontSize="30" color="#6BA6F1" left="250" top="106">
		Nombre: Arturo Pérez Navarro
		Estado Civil: Casado
		Edad: 26 años
	</s:Label>

	<s:Image x="40" y="415" source="assets/images/codigo.png">
		
	</s:Image>
	<s:TextInput id="lbl" x="40" y="482" text="">
		
	</s:TextInput>
	
	<s:Image source="assets/images/hora_inicio.png" x="0" y="559">
		
	</s:Image>
	<s:TextArea x="50" y="627" width="800" height="151" text="Recordatorio de Vapec" contentBackgroundColor="#ffffff">
		
	</s:TextArea>
	
	<s:Label fontFamily="Futura" fontSize="40" color="#6BA6F1" x="-40" y="756">
		Responsable
	</s:Label>
	
	<s:Image source="assets/images/sup.png" x="50" y="843">
		
	</s:Image>
	<s:RadioButton x="154" y="873">
		
	</s:RadioButton>
	
	<s:Image source="assets/images/vend.png" x="223" y="846">
		
	</s:Image>
	<s:RadioButton x="348" y="873">
		
	</s:RadioButton>

	<s:ComboBox x="545" y="873" contentBackgroundColor="#ffffff">
		<s:dataProvider>
		<s:ArrayList>
			<fx:Object data="data1"></fx:Object>
			<fx:Object data="data2"></fx:Object>
			<fx:Object data="data3"></fx:Object>
			<fx:Object data="data4"></fx:Object>
		</s:ArrayList>
		</s:dataProvider>
	</s:ComboBox>
	
	<s:Button id="btn" label="Start Camera" width="193" x="495" y="464" height="81" click="buttonCamara_clickHandler(event)"/>

	
	<s:TextArea x="50" y="1000" width="800" height="251" >
		
	</s:TextArea>
	
	<s:Button id="ok" styleName="boton" icon="assets/images/ok.png" x="776" y="1264" click="links(); glow(this.ok);" >
	</s:Button>
	<s:BusyIndicator id="bi" visible="false" x="400" y="614" width="97" height="82"/>
	<s:VGroup width="100%" horizontalAlign="center" id="vg">
		<s:SpriteVisualElement id="sv" width="360" height="400"/>
	</s:VGroup>

	 
</s:View>
